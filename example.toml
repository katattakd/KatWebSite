[[builder]] # A static site builder. Sites are built in the order they are specified in.
input_dir = "sites/test" # Where to read input files from. Only files in the root of the directory get parsed, subdirectories are ignored.
output = "html/test" # Where to output generated files to. WARNING: If the output directory contains existing files, they *will* be removed.

[builder.renderers] # A list of renderers to use. If this is not specified, all renderers are enabled (except those that restrict functionality instead of adding it, like the HTML sanitizer). If this is specified, all renderers default to being off, and must be enabled manually.
data = true # Load TOML files from data_dir into site.data.
liquid = true # Parse input files as Liquid with TOML frontmatter. NOTE: If this is enabled, files must contain frontmatter delimiters (---) to be handled. If this is disabled, all files in the directory are parsed.
sass = true # Compile SASS files into CSS.
markdown = true # Compile markdown files into HTML. This supports both GFM and Comrak markdown extensions.
sanitizer = true # Sanitize untrusted HTML files.
layout = true # Apply Liquid layouts to files. This does not require the liquid renderer to be enabled, but if the liquid renderer is disabled, frontmatter variables and Liquid includes will not be available to the layout handler.

[builder.default_dirs] # A list of working directories for various renderers (relative to input_dir). Defaults are listed below.
data_dir = "_data" # Folder to load TOML files from.
layout_dir = "_layouts" # Folder to load Liquid layouts from.
include_dir = "_includes" # Folder to load Liquid includes from.

[builder.default_vars] # Liquid variables added to *all* files. This will not overwrite variables specified in the frontmatter.
title = "Hello World!"



[[vhost]] # A virtual host. Virtual hosts and their handlers will be registered in the order they are specified in.
host = "localhost" # The Host header that this vhost serves. Must be an exact match.

[[vhost.redir]] # An HTTP redirect.
target = "/redir/*" # The location this redirect targets (ex: /redir would target example.com/redir), defaults to "/". Supports wildcards and path deserialization.
dest = "https://example.com" # The URL this redirects to.
permanent = false # If the redirect should be permanent (ex: redirecting from an old domain to a new one), or temporary (ex: link shortening or a "coming soon" page). In doubt, use a temporary redirect unless you are absolutely sure you will not need to remove the redirect later on. Defaults to using a temporary redirect.

[[vhost.redir]]
target = "/redirect/{path:.*}" # Use path deserialization to append the end of the path to the target.
dest = "https://example.com" # All deserialized items are appended to the path as items (ex: test,test2 -> [dest]/test/test2)
permanent = false

[[vhost.files]] # A virtual host file handler.
mount = "/" # The path this file hander serves (ex: /assets would serve files to example.com/assets/...). Defaults to "/".
file_dir = "html/localhost" # Disk location files are loaded from.

[[vhost.files]]
mount = "/test2"
file_dir = "html/test"

[vhost.tls] # TLS configuration for the virtual host. If this is not specified, the virtual host will only be reachable over HTTP.
pemfiles = [ # PEM file types are automatically detected, and can be specified in any order.
	"localhost.pem", # The TLS certificate file used by the listener.
	"localhost-key.pem" # The TLS key used by the listener.
]
http_dest = "https://localhost:8181" # If this is specified, all HTTP requests going to this vhost are redirected to the specified HTTPS destination. If this isn't specified, HTTP requests are handled the same way as HTTPS requests.


# Example #1: using vhosts for domain -> newdomain redirects
[[vhost]]
host = "127.0.0.1"

[[vhost.redir]]
target = "/" # Paths without a target (ex: http://example.com) are a special case and must be handled separately.
dest = "https://localhost:8181"
permanent = true

[[vhost.redir]]
target = "/{path:.*}"
dest = "https://localhost:8181"
permanent = true



[headers] # HTTP headers added to *all* responses. This will not overwrite existing headers in a response.
server = "KatWebSite"

# strict-transport-security = "max-age=63072000;includeSubDomains;preload" # Setup HSTS preloading (please read https://hstspreload.org before uncommenting!)

content-security-policy = "default-src 'none'; connect-src 'self'; font-src 'self'; img-src 'self'; media-src 'self'; script-src 'self'; style-src 'self'; base-uri 'none'; plugin-types 'none'; sandbox allow-scripts; frame-ancestors 'none'; block-all-mixed-content; require-trusted-types-for 'script'; upgrade-insecure-requests" # A fairly decent default Content-Security Policy. A reference for CSP values can be found at https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy, and https://csp-evaluator.withgoogle.com can be useful for validating your CSP header.
referrer-policy = "no-referrer" # Disable the HTTP referrer header to improve security.
x-content-type-options = "nosniff" # Prevent browsers from sniffing the MIME types of resources.

[server] # Global HTTP server configuration.
# IP addresses to bind the HTTP listener to.
http_bind = ["[::1]:8080", "127.0.0.1:8080"]

# IP addresses to bind the HTTPS listener to.
tls_bind = ["[::1]:8181", "127.0.0.1:8181"]

# If neither http_bind or tls_bind are specified, the HTTP server will not be started.

# The formatting string used for request logs. Default is below.
log_format = "%{Host}i %a \"%r\" %s %b \"%{Referer}i\" \"%{User-Agent}i\" %D"
# Format (taken from actix_web::middleware::Logger):
# %%		The percent sign
# %a		Peer IP address (or IP address of reverse proxy if used)
# %t		Time when the request started processing (in RFC 3339 format)
# %r		First line of request (Example: GET /test HTTP/1.1)
# %s		Response status code
# %b		Size of response in bytes, including HTTP headers
# %T		Time taken to serve the request, in seconds to 6 decimal places
# %D		Time taken to serve the request, in milliseconds
# %U		Request URL
# %{r}a		"Real IP" remote address (from HTTP headers)
# %{FOO}i	request.headers["FOO"]
# %{FOO}o	response.headers["FOO"]
#%{FOO}e	env_var["FOO"]
