# This file documents KatWebSite's configuration format, along with documentation for the various features in KatWebSite.
# Please note that this file *should not* be used directly. It's meant as documentation, not as a starting point for your site's configuration.

# Note: Although the config options are *generally* loaded in the order they're specified in, this may change between releases, and the loading order should never be relied on unless it's explicitly specified by the documentation.

# Note: Specifying unused values in the config file, or not specifying a value that lacks a default, while result in KatWebSite failing to parse the configuration. This is intentional, to prevent subtle issues from arising after upgrading/downgrading KatWebSite.

# Note: Unless explicitly specified, configuration values *do not* support wildcards.


[[builder]]
# A builder turns input files into a generated site, which can then be served by the web server. Builders will always be run to completion before the HTTP server starts.

input_dir = "html/localhost"
# Input files are loaded from the input_dir directory and given to the renderer stages. However, there are some exceptions:
# - Subdirectories are ignored. This is intentional, and can be used to nest builders with different settings.
# - (Soft) symbolic links are not loaded like ordinary files. They are turned into absolute paths, and then re-created in the output directory.
# - Files in the input_dir that are not handed by a renderer are (hard) symbolic linked into the output directory. If symbolic linking is not possible, the file is copied instead.

output = ".site/localhost"
# All output from the builder is written into the output directory, builders will not write outside of it.
# However, keep in mind that **if the output directory already exists, it will be cleared and re-created**! Do not attempt to put static files inside an output directory, configure the builder to copy/symlink them instead.


[builder.renderers]
# Renderers are what actually generate your site. Without them, builders become just a really fancy and weird way of copying files from one directory to another.
# If the [builder.renderers] block is not specified, all renderers default to being enabled, except those that restrict functionality instead of adding it (like the HTML sanitizer). However, if a [builder.renderers] block is specified, all renderers will default to being off, and must be enabled individually.

data = true
# This loads TOML files from [builder.default_dirs.data_dir], and parses them into Liquid variables.
# All data in the data directory is assumed to be TOML. An overview of TOML syntax is available at https://toml.io

liquid = true
# Enables per-file Liquid templating. KatWebSite uses a slightly expanded version of the Liquid standard library, which is provided by liquid-lib (https://docs.rs/liquid-lib/0.22.0/liquid_lib).
# You can learn about Liquid and it's core standard library at https://shopify.github.io/liquid

# The variables which can be accessed by Liquid templates are listed below.
# site:
# - pages: Array of [type: Page] - A list of all builder input files handled by a renderer.
# - files: Array of String - A list of all builder input files (except symlinks and subdirectories). These are only file names, not absolute paths.
# - data: Array of Variables - All the data loaded from the data directory. If the data renderer is disabled, this will be an empty array.
# page: [type: Page] - The file currently being processed.

# [type: Page]:
# - path: String - The filename of the current Page.
# - data: Variables - All frontmatter data from the current Page, if any.
# - content: String - The contents of the current Page. This is primarily intended for use in layouts (where this would contain the rendered output), but can be used in ordinary files too (where it contains the unprocessed contents, with frontmatter removed.)

# Note: If Liquid is enabled, files in [builder.input_dir] *must* contain frontmatter opening and closing tags to be parsed. The frontmatter content between these tags is optional, but *must* be in the TOML format if specified. An example of this is shown below:
# --- 
# title = "My page"
# ---
# [rest of file content]

sass = true
# Compiles SASS files from [builder.input_dir] into CSS. 
# KatWebSite uses Grass as the SASS compiler, which may lack some of the features that Dart SASS supports.
# You can learn SASS syntax at https://sass-lang.com/guide

markdown = true
# Compiles Markdown files from [builder.input_dir] into HTML.
# KatWebSite uses Comrak as the markdown compiler, which allows for both Comrak and GFM extensions to be used in input files.
# You can learn Markdown syntax at https://commonmark.org/help, and learn about GFM extensions at https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown

sanitizer = true
# Sanitize untrusted HTML files (or files which have been compiled into HTML).
# KatWebSite uses Ammonia as the HTML sanitizer, which is built on the Servo browser engine. HTML sanitizing should be relatively robust, and is very restrictive.

layout = true
# Apply Liquid layouts, specified by the "layout" frontmatter variable, to files from [builder.input_dir].
# This has access to the same standard library and variables used by ordinary Liquid templates, with the exception of [Page].content being rendered instead of unprocessed.

# Note that layouts can be used even if per-file templating is disabled. However, if per-file templating is disabled, frontmatter will not be parsed or removed, and {% include %} blocks will not work.


[builder.default_dirs]
# Some renderers may require additional input files. The default directories these additional files get loaded from are specified below.
# Note that these paths are all relative to [builder.input_dir], but are not required to be in the input directory.

data_dir = "_data" # Folder to load TOML files for the data renderer.
layout_dir = "_layouts" # Folder to load Liquid layouts from, for the layout renderer.
include_dir = "_includes" # Folder to load Liquid includes from. This requires that [builder.renderers.liquid] is enabled.


[builder.default_vars]
# This specifies default values for variables in per-file frontmatter. If [builder.renderers.liquid] is disabled, this *will* be the contents of per-file frontmatter, instead of just the defaults.
# An example of a default value is shown below:
title = "My page"



[[vhost]]
# A virtual host allows you to easily specify web server configuration per site. If the web server is disabled, all virtual hosts are ignored.

host = "localhost" # The Host header that this virtual host will match.


[[vhost.redir]]
# This creates an HTTP redirect from one URL to another.

target = "/redir/"
# This specifies the location (relative to the virtual host) that this redirect will handle.
# Defaults to "/", supports both actix-web wildcards and path deserialization.

dest = "http://example.com"
# The destination to redirect to, can either be an absolute or relative URL.
# If any items are deserialized by the target, they're appended to the end of the path, like directories (ex: test,test2 -> [dest]/test/test2)

permanent = true
# If the redirect should be permanent or temporary. Defaults to temporary.
# A permanent redirect is cached by browsers, often indefinitely, and is treated by search engines like the URL it redirects to. Because of this, permanent redirects have limited uses, and should only be used when you are sure they will not need to be removed later on.
# However, temporary redirects are not cached or treated by search engines, and as a result, have more potential applications (like a "coming soon page" or for link shortening)


[[vhost.files]]
# This creates an HTTP file handler for serving web content.

mount = "/"
# This specifies the location (relative to the virtual host) that this file handler will serve.
# Defaults to "/". This will automatically match the first segment of a URL, so wildcards are not necessary

file_dir = ".site/localhost"
# This is the disk location files are served from.
# Note that this behaves significantly different from the [builder.input_dir] option. Subdirectories and symbolic links will be served normally by the file handler.


[vhost.tls]
# This specifies TLS configuration for the virtual host.
# If a virtual host is missing this configuration block, it will only be accessible over http.

pemfiles = [
	"ssl/localhost_cert.pem",
	"ssl/localhost_key.pem"
]
# This is used to specify TLS certificates and keys.
# The contents of PEM files provided to the TLS handler are automatically detected. Because of this, you can specify as many pemfiles as you want.
# PEM files will be loaded in the order you've specified, which may be useful for splitting a complex certificate chain into multiple files. If multiple private keys are found, only the first one specified will be used.
# Certificates must be in x509 format, and keys must be in PKCS8 format.

http_dest = "https://localhost:8181"
# This specifies the destination for an automatic HTTP -> HTTPS redirect.
# If this is specified, all HTTP virtual host requests will be redirected to [vhost.tls.http_dest].
# If this is not specified, HTTP virtual host requests will be handled the same way as HTTPS requests.



# Example: Using virtual hosts for domain -> new domain redirects.
[[vhost]]
host = "127.0.0.1"

[[vhost.redir]]
target = "/" # Paths without a target (ex: http://example.com) are a special case and must be handled separately.
dest = "https://localhost:8181"
permanent = true

[[vhost.redir]]
target = "/{path:.*}" # Uses path deserialization to append the end of the path to the dest.
dest = "https://localhost:8181"
permanent = true



[headers]
# This specifies HTTP headers that will be added to all requests handled by the server.
# If the header already exists in the generated response, it will not be overwritten.

server = "KatWebSite"

# strict-transport-security = "max-age=63072000;includeSubDomains;preload" # An example of HSTS preloading. Please read more about this from https://hstspreload.org before using it in your own configuration.

content-security-policy = "default-src 'none'; connect-src 'self'; font-src 'self'; img-src 'self'; media-src 'self'; script-src 'self'; style-src 'self'; base-uri 'none'; plugin-types 'none'; sandbox allow-scripts; frame-ancestors 'none'; block-all-mixed-content; require-trusted-types-for 'script'; upgrade-insecure-requests"
# A strict but reasonable Content-Security-Policy.
# A reference for CSP values can be found at https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy, and https://csp-evaluator.withgoogle.com can be useful for validating your CSP header.

referrer-policy = "no-referrer" # Disables the HTTP referrer header to prevent sensitive data from being logged.
x-content-type-options = "nosniff" # Prevents browsers from sniffing the MIME types of resources. This can be useful when you want to make sure a file is interpreted by it's extension.



[server]
# This specifies the global configuration for the built-in HTTP server. If this block is not specified, all [vhost] and [headers] sections will be ignored, and the HTTP server will not be started.

http_bind = ["[::1]:8080", "127.0.0.1:8080"] # This specifies all the addresses the HTTP listener will use.

tls_bind = ["[::1]:8181", "127.0.0.1:8181"] # This specifies all the addresses the HTTPS listener will use.

# If neither [http_bind] or [tls_bind] are specified, the HTTP server will not be started.

log_format = "%{Host}i %a \"%r\" %s %b \"%{Referer}i\" \"%{User-Agent}i\" %D"
# This specifies the formatting string used for request logs. The default value is shown here.
# Format (taken from actix_web::middleware::Logger):
# %%		The percent sign
# %a		Peer IP address (or IP address of reverse proxy if used)
# %t		Time when the request started processing (in RFC 3339 format)
# %r		First line of request (Example: GET /test HTTP/1.1)
# %s		Response status code
# %b		Size of response in bytes, including HTTP headers
# %T		Time taken to serve the request, in seconds to 6 decimal places
# %D		Time taken to serve the request, in milliseconds
# %U		Request URL
# %{r}a		"Real IP" remote address (from HTTP headers)
# %{FOO}i	request.headers["FOO"]
# %{FOO}o	response.headers["FOO"]
#%{FOO}e	env_var["FOO"]
